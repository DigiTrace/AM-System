security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
    #    AppBundle\Entity\Nutzer: plaintext
   
    
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Nutzer
                property: username
        
        
        #fos_userbundle:
        #    id: fos_user.user_provider.username
        users_in_memory: { memory: null }
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            user_checker: App\Security\UserChecker
            form_login:
                login_path: Nutzerlogin
                check_path: Nutzerlogin
                provider: app_user_provider
                enable_csrf: true
            logout:
                path: Nutzerlogout
            remember_me:
                secret: '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds

       #     logout:       true
            #anonymous:    true
            
           

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, role: PUBLIC_ACCESS }
        - { path: ^/register/confirm, role: PUBLIC_ACCESS }
        - { path: ^/register/confirmed, role: PUBLIC_ACCESS }
        - { path: ^/register, role: ROLE_ADMIN }
        - { path: ^/admin, role: ROLE_ADMIN }
        - { path: ^/resetting, role: PUBLIC_ACCESS  }
        - { path: ^/, role: ROLE_USER}
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
